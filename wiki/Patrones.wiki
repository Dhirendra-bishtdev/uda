#summary Patrones de interacción.
#labels Featured,Phase-Design

<h1>Patrones de interacción</h1>

En el planteamiento y desarrollo de los patrones de interacción analizados se ha tenido en cuenta las guías de accesibilidad [http://www.w3.org/TR/WCAG20/ WCAG 2.0] (Content Accessibility Guidelines) y [http://www.w3.org/WAI/intro/aria.php WAI-ARIA] (Accessible Rich Internet Applications), estándares de desarrollo web accesible que serán ampliamente utilizados en los próximos años.

A diferencia de las WCAG 1.0 desarrolladas por el W3C y la Norma UNE 139803:2004, <i>“Aplicaciones informáticas para personas con discapacidad. Requisitos de accesibilidad para contenidos en la Web”</i>, desarrollada por AENOR y en la que se basa la legislación española actual en materia de accesibilidad, las WCAG 2.0 asumen que cualquier agente de usuario y tecnología asistiva actual o futura soporta Javascript por lo que no exigen la creación de alternativas sino que los controles RIA estén programados de forma accesible.

En concreto, las WCAG 2.0 que exigen la accesibilidad mediante teclado e independiente del dispositivo de entrada:
<ul>
<li>WCAG 2.0 - Pauta 2.1</li>
Accesible a través del teclado: Haga que toda funcionalidad esté disponible a través del teclado.
</ul>

Además, las WCAG 2.0 añaden nuevas pautas que influyen en la interacción con los controles RIA:
<ul>
<li>WCAG 2.0 - Pauta 2.2</li>
Tiempo suficiente: <i>Proporcione a los usuarios el tiempo suficiente para leer y usar un contenido.</i>

<li>WCAG 2.0 - Pauta 2.4</li>
Navegable: <i>Proporcione medios que sirvan de ayuda a los usuarios a la hora de navegar, localizar contenido y determinar dónde se encuentran.</i>

<li>WCAG 2.0 - Pauta 3.2</li>
Predecible: <i>Cree páginas web cuya apariencia y operabilidad sean predecibles.</i>

<li>WCAG 2.0 - Pauta 3.3</li>
Ayuda a la entrada de datos: <i>Ayude a los usuarios a evitar y corregir errores.</i>
</ul>

En cualquier caso, debido a la multitud de problemas de accesibilidad que se pueden dar y a la propia naturaleza a veces poco accesible de las tecnologías RIA, puede haber patrones difícilmente accesibles.

<h2>Tecnología de desarrollo</h2>
Con el fin de reducir al máximo la curva de aprendizaje en el uso de <img src="http://uda.googlecode.com/svn/wiki/uda-mini-micro2.png"/>, todos los patrones de interacción propuestos han sido desarrollados con el framework JavaScript [http://jquery.com/ jQuery], aprovechando en todos los casos los plugins ya desarrollados por la comunidad.

En general, jQuery es fácil de aprender y tiene un estilo de programación casi coloquial, lo que permite conseguir resultados  rápidamente sin tener que aprender las partes más complejas de JavaScript. 

La gestión de ciertas partes visuales de los componentes que implementan los patrones  identificados se han realizado mediante el plugin [http://jqueryui.com/home jQueryUI], el cual nos permite construir aplicaciones web altamente interactivas, proporcionando abstracciones de bajo nivel de interacción y animación, efectos avanzados de alto nivel y  componentes personalizables (estilos).

Los recursos disponibles para conocer y trabjar con jQuery y jQueryUI son muy numerosos. Un amplia comunidad de desarrolladores muy activos completan continuamente su biblioteca de posibilidades (plugins). La disponibilidad de numerosos libros, articulos, foros, etc. hace que el uso de esta librería se convierta en un ventaja.

Otro aspecto a su favor es que jQueryUI está trabajando activamente en temas de accesibilidad. Cierto soporte WAI-ARIA fue ya introducido en la versión 1.7 y es posible que la versión 2.0 cumpla totalmente con las guías de accesibilidad WAI-ARIA.


<h2>RUP</h2>

Los componentes (plugins jQuery) que implementan los patrones de interacción identificados han sido agrupados bajo un nombre propio, RUP (Rich Uda Patterns). 

Estos componentes RUP son totalmente configurables, es decir, que es posible modificar su comportamiento según interese en cada caso. Por ejemplo, el mismo componente de mantenimiento cubre los patrones de "mantenimiento con formulario" y el de "mantenimiento con creación y edición en celda", de modo que a través de variables de configuración el mismo componente se podrá comportar de la manera deseada.  

<h3>1. Pestañas de contenido</h3>

Permiten dar acceso de forma compacta a grupos de contenidos mutuamente excluyentes pudiendo ser integradas en zonas muy reducidas de la interfaz.

<h4>Usar cuando</h4>Cuando tengamos un elemento formado por mucha información y podamos dividir ésta en grupos diferenciados dando así a los usuarios acceso a la información de forma rápida y en un espacio compacto.

También es útil cuando tenemos que mostrar mucha información dividida en grupos diferenciados y disponemos de poco espacio para hacerlo.

<h4>Por qué</h4>
<ul>
<li>Cuando la información está correctamente separada y dividida en pestañas se facilita mucho la comprensión de la interfaz por parte del usuario ya que todo parece lógico, puesto en su sitio y correctamente separado.</li>
<li>Dan acceso a información amplia y variada sin agobiar al usuario: él elige qué pestaña mirar</li>
<li>Optimizan el espacio en la interfaz. En ciertas situaciones en las que estamos obligados a incluir una gran cantidad de información en un espacio reducido pueden ser una buena solución.</li>
</ul>

<h4>Ejemplo</h4>
TODO. Pegar Ejemplo

<h3>2. Menús de navegación</h3>

Menú de la aplicación mantenido a lo largo de todas las páginas de forma consistente, que muestra entradas directas a secciones clave de la aplicación.

<h4>Usar cuando</h4>Cuando tengamos un sitio web estructurado jerárquicamente y relativamente amplio y queramos facilitar y agilizar la navegación y dar contexto al usuario.

<h4>Por qué</h4>
<ul>
<li>Los menús de navegación son la forma estándar de estructurar grupos jerárquicos de contenidos y dar acceso a ellos.</li>
<li>Facilitan la comprensión de la estructura de la página y la navegación.</li>
<li>Apoyados de migas de pan y buenos títulos y subtítulos dan buen contexto al usuario.</li>
</ul>

<h4>Ejemplo</h4>
TODO. Pegar Ejemplo

<h3>3. Pestañas de navegación</h3>

Menú de navegación de la aplicación que divide ésta en secciones claramente excluyentes entre sí y da acceso a ellas.

<h4>Usar cuando</h4>Cuando tengamos una aplicación web cuyos contenidos se puedan dividir en secciones claramente excluyentes entre sí y queramos proporcionar a los usuarios un menú de navegación para navegar por ellas.

<h4>Por qué</h4>
<ul>
<li>Cuando la información está bien organizada y dividida se facilita mucho la comprensión de la navegación ya que se reduce su ambigüedad.</li>
<li>La metáfora de las pestañas es conocida por los usuarios. Es una metáfora traída del mundo real basada en los clasificadores de papeles.</li>
</ul>

<h4>Ejemplo</h4>
TODO. Pegar Ejemplo 

<h3>4. Migas de pan</h3>

Se muestra a los usuarios la ruta de navegación que ha seguido por la aplicación permitiéndoles volver hacia niveles superiores hasta la página de inicio.

<h4>Usar cuando</h4>Cuando queramos mostrar al usuario la ruta de navegación que ha seguido, en qué página está y permitirle volver fácilmente a niveles superiores.

Se recomienda usarlas en aplicaciones web con tres o más niveles de jerarquía ya que es en este tipo de aplicaciones donde son realmente útiles.

<h4>Por qué</h4>
<ul>
<li>Es una solución conocida por los usuarios y fácil de comprender.</li>
<li>Aporta flexibilidad a la navegación al permitir volver a niveles superiores.</li>
<li>Ocupa poco espacio en la interfaz.</li>
<li>Refuerza el contexto y la navegación ya que muestra a los usuarios dónde están y cómo está estructurada la información.</li>
<li>Ayuda a los usuarios a comprender la estructura de la aplicación.</li>
</ul>

<h4>Ejemplo</h4>
TODO. Pegar Ejemplo 

<h3>5. Botonera de opciones</h3>

Grupo de botones icónicos que ejecutan acciones generales o referidas a uno o varios elementos de la interfaz.

<h4>Usar cuando</h4>La botonera general se deberá utilizar para mostrar un menú genérico de opciones que afecten a toda la aplicación mientras que la botonera local deberá utilizarse para mostrar un menú propio de una página o contenido de la aplicación.

<h4>Por qué</h4>
<ul>
<li>Es un sistema de menús muy conocido por todos los usuarios.</li>
<li>Es muy facil de usar.</li>
<li>Es una solución válida tanto para crear menús generales de la aplicación como menús que ejecuten acciones sobre elementos en pantalla.</li>
</ul>

<h4>Ejemplo</h4>
TODO. Pegar Ejemplo 

<h3>6. Fechas</h3>

El usuario puede introducir manualmente una fecha o seleccionarla de un calendario moviéndose por días, meses y años y recibiendo ayudas y sugerencias para minimizar las posibilidades de que introduzca una fecha incorrecta.

<h4>Usar cuando</h4>Cuando el usuario tenga que introducir una fecha y queramos darle flexibilidad para escribirla manualmente o seleccionándola de un calendario.

<h4>Por qué</h4>
<ul>
<li>Vale tanto a usuarios avanzados (eficiencia) como a novatos (sencillez).</li>
<li>La forma de introducir la fecha es flexible: unos usuarios preferirán escribirla a mano y otros seleccionarla del calendario.</li>
<li>Manejo independiente de dispositivo: se puede usar tanto el ratón como el teclado.</li>
</ul>

<h4>Ejemplo</h4>
TODO. Pegar Ejemplo 

<h3>7. Intervalos de fechas</h3>

El usuario puede introducir manualmente un intervalo de fechas o seleccionarlo de un calendario por días, meses y años y recibiendo ayudas y sugerencias para minimizar las posibilidades de que introduzca una fecha incorrecta.

<h4>Usar cuando</h4>Cuando el usuario tenga que introducir un intervalo de fechas y queramos darle flexibilidad para escribirlo manualmente o seleccionándolo de un calendario.

<h4>Por qué</h4>
<ul>
<li>El sistema de introducción de fechas de este patrón tiene las ventajas del patrón anterior. Selección e introducción de fechas.</li>
<li>Es eficiente y rápido introducir intervalos.</li>
<li>Ocupa poco espacio en la interfaz en comparación con otras soluciones.</li>
</ul>

<h4>Ejemplo</h4>
TODO. Pegar Ejemplo 

<h3>8. Controles dependientes (Combos)</h3>

Permite al usuario seleccionar un elemento de una gran lista o de varias listas relacionadas que ocupan poco espacio en la interfaz.

<h4>Usar cuando</h4>Cuando tengamos que mostrar muchos elementos categorizados en un espacio reducido de la interfaz.

También puede ser útil como componente para crear accesos rápidos a partes de la aplicación que nos interese destacar.

<h4>Por qué</h4>
<ul>
<li>Una vez se conoce su funcionamiento es muy rápido y fácil de usar.</li>
<li>Optimiza espacio en la interfaz ya que podemos incluirlo en espacios reducidos.</li>
</ul>

<h4>Ejemplo</h4>
TODO. Pegar Ejemplo 

<h3>9. Autocomplete (Suggest)</h3>

Ofrece sugerencias de búsqueda en tiempo real coincidentes con la búsqueda que está realizando el usuario.

<h4>Usar cuando</h4>Cuando queramos mejorar la búsqueda ofreciendo sugerencias a los usuarios.

<h4>Por qué</h4>
<ul>
<li>Es una funcionalidad muy fácil y cómoda de utilizar.</li>
<li>Mejora mucho la experiencia de uso de la búsqueda sencilla.</li>
<li>Bien pensada e implementada permite a un usuario descubrir nuevas áreas de conocimiento antes desconocidas para él. Por ejemplo, un estudiante que sólo conozca el método lógico deductivo de investigación y busque información sobre él, puede recibir la sugerencia "método lógico inductivo" descubriendo un método de investigación que antes no conocía.</li>
</ul>

<h4>Ejemplo</h4>
TODO. Pegar Ejemplo

<h3>10. Controles dependientes</h3>
Permite al usuario seleccionar un elemento de una gran lista o de varias listas relacionadas que ocupan poco espacio en la interfaz.

<h4>Usar cuando</h4>Cuando tengamos que mostrar muchos elementos categorizados en un espacio reducido de la interfaz.

También puede ser útil como componente para crear accesos rápidos a partes de la aplicación que nos interese destacar.

<h4>Por qué</h4>
<ul>
<li>Una vez se conoce su funcionamiento es muy rápido y fácil de usar.</li>
<li>Optimiza espacio en la interfaz ya que podemos incluirlo en espacios reducidos.</li>
</ul>

<h4>Ejemplo</h4>
TODO. Pegar Ejemplo

<h3>9. Presentación de datos en tabla (Grid)</h3>

Se presentan los datos de forma que sean fácilmente escaneables visualmente y que faciliten encontrar la información que se busca.

<h4>Usar cuando</h4>Cuando tengamos que presentar a los usuarios filas de datos y queramos que les resulte fácil encontrar la información que buscan.

<h4>Por qué</h4>
<ul>
<li>Es la forma más estándar de mostrar filas de datos.</li>
<li>Permite el ojeado rápido y encontrar fácilmente la información.</li>
<li>Los usuarios pueden hacer rollover o click sobre una fila para ver así más claramente su información.</li>
</ul>

<h4>Ejemplo</h4>
TODO. Pegar Ejemplo 

Este patrón complementa su funcionalidad con otros patrones definidos a continuación. 

<h3>9.1. Paginación</h3>

Permite moverse por una lista larga de elementos presentados en forma de lista o de tabla.

<h4>Usar cuando</h4>Cuando las listas de datos o tablas que se les presentan a los usuarios sean muy grandes y se haga necesario algún mecanismo de navegación para moverse entre tantos resultados y situarse en la serie.

<h4>Por qué</h4>
<ul>
<li>Es un sistema conocido por todos los usuarios, sencillo e intuitivo.</li>
<li>Es fácil de comprender y utilizar.</li>
</ul>

<h4>Ejemplo</h4>
TODO. Pegar Ejemplo 

<h3>9.2. Ordenación de filas</h3>

Los usuarios pueden ordenar las filas de datos de la forma que les resulte más conveniente.

<h4>Usar cuando</h4>Cuando queramos dar al usuario la posibilidad de ordenar las filas de datos en función de sus necesidades para que pueda encontrar la información que busca más cómodamente.

<h4>Por qué</h4>
<ul>
<li>Es muy conocido por los usuarios y el método más estándar en Internet para ordenar filas de datos.</li>
<li>Es un sistema de ordenación sencillo, intuitivo y rápido de utilizar.</li>
<li>Permite encontrar fácilmente la información.</li>
</ul>

<h4>Ejemplo</h4>
TODO. Pegar Ejemplo 

<h3>9.3. Ordenación de columnas</h3>

Los usuarios pueden ordenar las columnas de datos de la forma que les resulte más conveniente.

<h4>Usar cuando</h4>Este patrón está destinado a los usuarios avanzados y es especialmente útil cuando les queramos dar el mayor grado de control posible sobre la visualización de las filas de datos.

<h4>Por qué</h4>
<ul>
<li>Permite a los usuarios organizar las columnas a su gusto para ver los datos como prefieran.</li>
<li>Es la forma estándar y más conocida de reorganizar las columnas de datos ya que se basa en el drag&drop, un sistema de interacción conocido por los usuarios avanzados.</li>
<li>Ofrece una gran flexibilidad en la presentación de las filas de datos.</li>
<li>Una vez aprendido es fácil de usar así que puede beneficiar tanto a usuarios avanzados como a novatos.</li>
</ul>

<h4>Ejemplo</h4>
TODO. Pegar Ejemplo 

<h3>9.4. Selección e interacción con elementos</h3>

Los usuarios pueden seleccionar filas de las tablas y realizar acciones sobre ellas.

<h4>Usar cuando</h4>Cuando tengamos una tabla de datos y queramos que los usuarios puedan interactuar con ellos.

<h4>Por qué</h4>
<ul>
<li>Es fácil de usar e intuitivo.</li>
<li>Es potente y flexible ya que permite interactuar con las filas seleccionando un elemento y/o utilizando la botonera.</li>
<li>Es escalable ya que se pueden implementar muchas opciones de interacción en los menús.</li>
<li>Ofrece feedback en todo momento.</li>
</ul>

<h4>Ejemplo</h4>
TODO. Pegar Ejemplo 

<h3>9.5. Filtrado</h3>

Los usuarios pueden filtrar los datos de las filas en función de diferentes criterios para obtener la información que buscan.

<h4>Usar cuando</h4>Cuando tengamos un gran número de filas de datos y queramos dar a los usuarios la posibilidad de filtrarlos para encontrar la información que buscan con mayor facilidad.

Es un sistema idóneo para usuarios avanzados y tablas con gran cantidad de datos.

<h4>Por qué</h4>
<ul>
<li>Es un sistema intuitivo y fácil de usar tanto para usuarios novatos como avanzados.</li>
<li>Es una de las formas más estándares y conocidas de implementar el filtrado en tablas de datos.</li>
<li>Es ágil y rápido, lo que beneficia a los usuarios que tienen que trabajar continuamente con gran cantidad de filas de datos.</li>
<li>Proporciona una gran flexibilidad y potencia ya que permite combinar los filtros o filtrar por un sólo criterio. Por ejemplo, se puede filtrar sólo por fecha o por fecha y título a la vez.</li>
</ul>

<h4>Ejemplo</h4>
TODO. Pegar Ejemplo

<h3>10. Mantenimiento con formulario</h3>

Añadir(Create): El usuario puede añadir nuevos registros a una tabla cuyos registros pueden contener más campos de los que se muestran en la vista de la tabla. 

Visualizar (Read): El usuario puede visualizar datos de forma que sean fácilmente escaneables y que faciliten encontrar la información que se busca.

Editar (Update): El usuario puede editar registros de una tabla cuyos registros pueden contener más campos de los que se muestran en la vista de la tabla.

Eliminar (Delete): El usuario puede eliminar registros de una tabla de manera individual o aquellos que ha seleccionado previamente.

Las acciones de añadir, visualizar y editar se realizarán sobre un formulario de datos.

Este patrón se compone a su vez de otros patrones de interacción ya  identificados anteriormente.

<h4>Usar cuando</h4>Cuando queramos ofrecer a los usuarios la posibilidad de crear, visualizar, editar, o eliminar registros de una tabla, siempre que el número de campos que se ve en la vista de la tabla sea menor que el número total de campos que forman los registros.

En caso de que se muestren todos los campos de los registros se recomienda utilizar el patrón de "mantenimiento con creación y edición en celda".

<h4>Por qué</h4>
<ul>
<li>Es un sistema de creación sencillo.</li>
<li>Permite crear, editar o eliminar uno o varios registros en una misma pantalla sin tener que moverse continuamente entre la tabla y la pantalla de creación.</li>
</ul>

<h4>Ejemplo</h4>
TODO. Pegar Ejemplo

<h3>11. Mantenimiento con creación y edición en celda</h3>

Como en el patrón anterior, éste patrón permite añadir, visualizar, editar o eliminar registros de una entidad de datos presentada en formato de tabla. Sin embargo, en este caso, las acciones de añadir y editar registros se realiza sobre las propias filas de la tabla sin necesidad de navegar a una nueva página.

También como el patrón anterior, este patrón se compone a su vez de otros patrones de interacción ya identificados anteriormente.
 
<h4>Usar cuando</h4>Cuando queramos ofrecer a los usuarios la posibilidad de crear o editar rápidamente los registros de una tabla, siempre que todos los registros de la tabla sean visibles en la misma.

Si la tabla contiene más filas de las que se visualizan se recomienda utilizar el patrón de "mantenimiento con formulario".

<h4>Por qué</h4>
<ul>
<li>Es un sistema sencillo y rápido para editar y crear registros.</li>
<li>Agiliza mucho la interacción.</li>
<li>La interacción se produce en contexto.</li>
</ul>

<h4>Ejemplo</h4>
TODO. Pegar Ejemplo

<h3>12. Diálogos</h3>

Permite lanzar subprocesos o mensajes importantes dentro de un proceso principal sin salirse de él evitando así la pérdida de contexto en la interacción con la aplicación.

<h4>Usar cuando</h4>Cuando el diálogo a mostrar contiene una información que el usuario no puede ignorar o cuando contiene una interacción clave para el usuario. 

También es útil cuando queremos que el usuario pueda rellenar o acceder a un contenido amplio sin tener que salirse del proceso actual.

En general, no se debe abusar de los diálogos modales. Se deben utilizar en casos concretos:

<ul>
<li>Mensajes de sistema muy importantes: Cuando sea imperativo que el usuario vea un mensaje importante del sistema. Si el mensaje no es crítico se le debe presentar como mensaje de sistema integrado en pantalla (ver patrón "Feedback").</li>
<li>Descarga de archivos:Cuando se le ofrezca al usuario la posibilidad de descargar un archivo. En la ventana modal se le pueden presentar opciones para descargar el archivo en diferentes formatos, mostrándole información sobre el tamaño del archivo, etc.</li>
<li>Mensajes de confirmación:Cuando el usuario realice una acción muy importante o que no se pueda deshacer. No se debe pedir confirmación para cada acción que realice el usuario porque se entorpecería mucho la interacción con la aplicación, sólo para las que se consideren especialmente delicadas.</li>
<li>Eliminar elementos: Cuando el usuario vaya a eliminar un elemento importante. En este caso, es recomendable pedir confirmación siempre que el usuario vaya a eliminar un elemento aunque también se podrían implementar soluciones diferentes, como por ejemplo no pedir ninguna confirmación e implementar un sistema que permita deshacer acciones realizadas, o no pedir ninguna confirmación y crear una carpeta "Papelera" similar a la de Windows donde se guarden todos los elementos que hemos borrado y desde la que se puedan eliminar definitivamente.</li>
<li>Subproceso dentro de un proceso principal: Cuando estemos editando un elemento con mucho contenido en un proceso principal (como podría ser la creación de un expediente de un alumno cuyo contenido estaría dividido en pestañas cada una de ellas con muchos campos) y queramos lanzar subprocesos dando la opción de añadir contenidos extra, podemos lanzarlos en ventanas modales.

Por ejemplo, en Wordpress la creación de un nuevo post se realiza en una pantalla principal pero para añadir una imagen o un elemento multimedia se lanza una ventana modal. Así, no sacamos al usuario del proceso principal, le hacemos ver que está trabajando en un subproceso y le ofrecemos opciones de contenido bajo demanda sin saturar la interfaz de opciones y campos.</li>

<li>Ampliación de imágenes: Cuando el usuario quiera ver una imagen o una galería ampliadas, en vez de mostrárselas en páginas o ventanas nuevas podemos hacerlo en una ventana modal en la que se pueda navegar entre las imágenes si es una galería.</li>
</ul>

<h4>Por qué</h4>
<ul>
<li>Está integrado en el proceso que se está llevando a cabo.</li>
<li>No tiene la mala imagen de los pop-ups y no es bloqueado por los programas anti pop-ups. Además no es un sistema intrusivo.</li>
<li>Cuando se utiliza para lanzar subprocesos funciona enfocando al usuario a lo importante: se le ofrecen unas opciones iniciales en el proceso principal y según pide nuevos contenidos se le lanzan en ventanas modales permitiéndole que se centre en ellos pudiendo realizar así la tarea de forma más progresiva.</li>
</ul>

<h4>Ejemplo</h4>
TODO. Pegar Ejemplo

<h3>Feedback</h3>

Mantiene informado al usuario en todo momento del estado del sistema y del resultado de sus acciones, y le proporciona ayudas para realizar las tareas y soluciones a los posibles problemas que pueda encontrar.

Algunas funcionalidades definidas en este patrón se implementan con el mismo componente que se ha creado para el patrón de "diálogos".

<h4>Usar cuando</h4>Cuando el usuario tenga una necesidad de información ya sea por cambios en el sistema, ejecución de procesos, realización de tareas o confirmación de acciones.

En concreto, los principales tipos de feedback que tenemos que considerar son los siguientes:

<ul>
<li>Mensajes de sistema o informativos: Se debe mostrar un mensaje en una zona visible cuando se produzca un cambio, noticia o actualización en el sistema que sea suficientemente interesante para los usuarios. No se debe mostrar mensajes para cada cambio en el sistema, sólo para los cambios que tengan importancia.</li>

Si es crítico que los usuarios vean el mensaje es mejor lanzarlo en un diálogo modal para asegurarnos de que lo ve (ver patrón 2.6. Diálogos)

<li>Mensajes de confirmación:Cuando un usuario realice una acción correctamente o un proceso se lleve a cabo sin incidencias hay que informar al usuario mediante un mensaje en pantalla.

Si la confirmación es sobre una acción importante que está realizando un usuario y lo que queremos es informarle de sus consecuencias antes de que la realice debemos lanzarle una ventana modal para asegurarnos de que ve el aviso. Por ejemplo, en una aplicación que envía un newsletter a toda la base de datos de clientes cuando el usuario pulse en "Enviar Newsletter" deberemos lanzarle una ventana modal para que confirme la acción ya que es una acción que no se puede deshacer.

Tras realizar la acción en la ventana modal se deberá mostrar un mensaje de feedback de confirmación o error en la parte superior del área de contenido de la pantalla principal.</li>

<li>Mensajes de error y aviso: También tenemos que informarle cuando realice acciones de forma incorrecta o se produzca algún error en la aplicación.

Hay que distinguir los errores graves de las acciones o situaciones que requieren avisar al usuario. En general, los errores estarán mas relacionados con errores del sistema como fallos del servidor al enviar un formulario, y los avisos con acciones incorrectas del usuario como al rellenar un formulario.</li>

<li>Feedback de formularios y edición: Cuando el usuario rellene un formulario se le debe ofrecer un feedback continuo para agilizar la interacción y reducir las posibilidades de que cometa errores. Además, se le debe ofrecer feedback de estado cuando lo envíe y de confirmación o error cuando le sea devuelto.</li>

<li>Estado de un proceso: Cuando se está procesando una acción (subiéndose un archivo, cargándose una página, etc.) debemos informar al usuario de su estado.</li>

<li>Mensajes previos / previsualización: También es importante informar al usuario de las consecuencias que tendrá el llevar a cabo una acción antes de realizarla. Por ejemplo, si está asignando una persona de contacto a un curso y no se puede cambiar posteriormente esa información sin contactar con un mando superior se debe avisar de ello al usuario.

Si las posibles consecuencias son muy graves o no hay posibilidad de corregirlas (como en el ejemplo del envío del newsletter a la base de datos de los clientes) se debe lanzar el aviso en una ventana modal para asegurarnos de que es consciente de las consecuencias de la acción antes de realizarla.</li>

También puede ser útil mostrar previsualizaciones antes de realizar ciertas acciones como guardar una foto en un perfil, imprimir un documento, etc.

<h4>Por qué</h4>
<ul>
<li>Todas las aplicaciones necesitan informar a los usuarios del estado del sistema y del resultado de sus acciones.</li>
<li>El feedback siempre se proporciona integrado con el elemento al que afecta o directamente tras realizar una acción por lo que la relación entre acción y efecto queda siempre clara.</li>
<li>Mejora la experiencia de uso y reduce al mínimo la frustración al usar la aplicación ya que los mensajes se ofrecen en un lenguaje inteligible para los usuarios y les proporcionan posibles vías de solución a los problemas. Además, se trata de evitar la aparición de problemas antes de que estos se produzcan.</li>
</ul>

<h4>Ejemplo</h4>
TODO. Pegar Ejemplo   
















<h3></h3>

<h4>Usar cuando</h4>

<h4>Por qué</h4>
<ul>
<li></li>
<li></li>
</ul>

<h4>Ejemplo</h4>
TODO. Pegar Ejemplo   