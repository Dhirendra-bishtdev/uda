#summary Patrones de interacción.
#labels Featured,Phase-Design

<h1>Patrones de interacción</h1>

En el planteamiento y desarrollo de los patrones de interacción analizados se ha tenido en cuenta las guías de accesibilidad [http://www.w3.org/TR/WCAG20/ WCAG 2.0] (Content Accessibility Guidelines) y [http://www.w3.org/WAI/intro/aria.php WAI-ARIA] (Accessible Rich Internet Applications), estándares de desarrollo web accesible que serán ampliamente utilizados en los próximos años.

A diferencia de las WCAG 1.0 desarrolladas por el W3C y la Norma UNE 139803:2004, <i>“Aplicaciones informáticas para personas con discapacidad. Requisitos de accesibilidad para contenidos en la Web”</i>, desarrollada por AENOR y en la que se basa la legislación española actual en materia de accesibilidad, las WCAG 2.0 asumen que cualquier agente de usuario y tecnología asistiva actual o futura soporta Javascript por lo que no exigen la creación de alternativas sino que los controles RIA estén programados de forma accesible.

En concreto, las WCAG 2.0 que exigen la accesibilidad mediante teclado e independiente del dispositivo de entrada:
<ul>
<li>WCAG 2.0 - Pauta 2.1</li>
Accesible a través del teclado: Haga que toda funcionalidad esté disponible a través del teclado.
</ul>

Además, las WCAG 2.0 añaden nuevas pautas que influyen en la interacción con los controles RIA:
<ul>
<li>WCAG 2.0 - Pauta 2.2</li>
Tiempo suficiente: <i>Proporcione a los usuarios el tiempo suficiente para leer y usar un contenido.</i>

<li>WCAG 2.0 - Pauta 2.4</li>
Navegable: <i>Proporcione medios que sirvan de ayuda a los usuarios a la hora de navegar, localizar contenido y determinar dónde se encuentran.</i>

<li>WCAG 2.0 - Pauta 3.2</li>
Predecible: <i>Cree páginas web cuya apariencia y operabilidad sean predecibles.</i>

<li>WCAG 2.0 - Pauta 3.3</li>
Ayuda a la entrada de datos: <i>Ayude a los usuarios a evitar y corregir errores.</i>
</ul>

En cualquier caso, debido a la multitud de problemas de accesibilidad que se pueden dar y a la propia naturaleza a veces poco accesible de las tecnologías RIA, puede haber patrones difícilmente accesibles.

<h2>Tecnología de desarrollo</h2>
Con el fin de reducir al máximo la curva de aprendizaje en el uso de <img src="http://uda.googlecode.com/svn/wiki/uda-mini-micro2.png"/>, todos los patrones de interacción propuestos han sido desarrollados con el framework de JavaScript [http://jquery.com/ jQuery], aprovechando en todos los casos los plugins ya desarrollados por la comunidad.

En general, jQuery es fácil de aprender y tiene un estilo de programación casi coloquial, lo que permite conseguir resultados  rápidamente sin tener que aprender las partes más complejas de JavaScript. 

La gestión de ciertas partes visuales de los componentes que implementan los patrones  identificados se han realizado mediante el plugin [http://jqueryui.com/home jQueryUI], el cual nos permite construir aplicaciones web altamente interactivas, proporcionando abstracciones de bajo nivel de interacción y animación, efectos avanzados de alto nivel y  componentes personalizables (estilos).

Los recursos disponibles para conocer y trabjar con jQuery y jQueryUI son muy numerosos. Un amplia comunidad de desarrolladores muy activos completan continuamente su biblioteca de posibilidades (plugins). La disponibilidad de numerosos libros, articulos, foros, etc. hace que el uso de esta librería se convierta en un ventaja.

Otro aspecto a su favor es que jQueryUI está trabajando activamente en temas de accesibilidad. Cierto soporte WAI-ARIA fue ya introducido en la versión 1.7 y es posible que la versión 2.0 cumpla totalmente con las guías de accesibilidad WAI-ARIA.

<h2>RUP</h2>
Los patrones generados se han agrupado bajo un nombre propio, RUP (Rich Uda Patterns) y son los siguientes:

<h3>Autocomplete</h3>
   